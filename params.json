{
  "name": "Bcs-ciphers",
  "tagline": "Minimal cipher functions in javascript for digital makers at beechen cliff",
  "body": "\r\n#A simple Caesar, or shift, Cipher:\r\n\r\n```javascript\r\n<?prettify ...?>\r\nvar yourname = \"Chuck Norris\";\r\nvar shift    = 5;\r\n\r\nsecret    = encodeCaesar(yourname, shift);\r\nnotsecret = decodeCaesar(secret,   shift);\r\n\r\n$('body').append(\" <p> \" + secret + \"<i> is <i> <b> \" + notsecret + \" <b> \" ); \r\n\r\nfunction encodeCaesar(str,shift){\r\n    /**\r\n     *  Encode the Caesar Cipher\r\n     *  by shifting each character\r\n     *  by a fixed amount\r\n    */\r\n    var ret = '';\r\n    var i   = 0;\r\n\r\n    while (i < str.length) {\r\n        ret += String.fromCharCode(str.charCodeAt(i) + shift);\r\n        i   += 1;\r\n    }\r\n    return ret;\r\n}\r\n\r\n//encoding and decoding are just opposites**\r\nfunction decodeCaesar(str,shift){\r\n    /**\r\n     *  Decode the Caesar Cipher\r\n     *  by shifting each character\r\n     *  back again by the same amount\r\n    */\r\n    var ret = '';\r\n    var i   = 0;\r\n\r\n    while (i < str.length) {\r\n        ret += String.fromCharCode(str.charCodeAt(i) - shift);\r\n        i   += 1;\r\n    }\r\n    return ret;\r\n}\r\n```\r\n**You can do much better by merging the two functions into one.**\r\n\r\n\r\n#A simple Vigenere, or polyalphabet, Cipher:\r\n\r\nThe Vigenere Cipher extends the Caesar Cipher by using a repeating keyword, where each letter sets the shift.\r\n\r\n```javascript\r\nyourPhrase = \"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG\";\r\nkey        = \"ARDVAAK\";\r\n\r\nsecret = encodeVigenere(yourPhrase, key);\r\n$('body').append(secret); \r\n\r\nfunction encodeVigenere(str){\r\n    /**\r\n     *  Encode the Vigenere Cipher\r\n     *  by shifting each character in yourPhrase\r\n     *  by the corresponding character in the \r\n     *  repeating key\r\n    */\r\n    var ret = '';\r\n    var phraseIndex = 0;\r\n    var keyIndex    = 0;\r\n\r\n    while (phraseIndex < str.length) {\r\n        // we want A as the first letter of the alphabet,\r\n        // A is ASCII 65, so subtract 65 from each charCodeAt in the key\r\n        ret += String.fromCharCode(str.charCodeAt(phraseIndex) + key.charCodeAt(keyIndex) - 65);\r\n        \r\n        phraseIndex++;\r\n        keyIndex++;\r\n    \r\n        if (keyIndex == key.length ){\r\n            keyIndex = 0;\r\n        }  \r\n    }\r\n    return ret;\r\n    \r\n}\r\n```\r\n\r\n**the Caesar implementation could be improved, and the decode functionality needs to be added**\r\n\r\n\r\n```python\r\n#bcs-ciphers\r\n#===========\r\n#\r\n#Minimal cipher functions in python for digital makers at beechen cliff\r\n#\r\n#A simple Caesar, or shift, Cipher:\r\n\r\ndef encodeCaesar(str,shift):\r\n    \"\"\"\r\n     *  Encode the Caesar Cipher\r\n     *  by shifting each character\r\n     *  by a fixed amount\r\n    \"\"\"\r\n    ret = ''\r\n\r\n    for letter in str:\r\n        ret += chr(ord(letter)+shift)\r\n    \r\n    return ret\r\n\r\n\r\n#encoding and decoding are just opposites**\r\ndef decodeCaesar(str,shift):\r\n    \"\"\"\r\n     *  Decode the Caesar Cipher\r\n     *  by shifting each character\r\n     *  back again by the same amount\r\n    \"\"\"\r\n    ret = ''\r\n\r\n    for letter in str:\r\n        ret += chr(ord(letter)-shift)\r\n    \r\n    return ret\r\n\r\n#You can do much better by merging the two functions into one.\r\n\r\n\r\n#A simple Vigenere, or polyalphabet, Cipher:\r\n#\r\n#The Vigenere Cipher extends the Caesar Cipher by using a repeating keyword, \r\n#where each letter sets the shift.\r\n#\r\n\r\ndef encodeVigenere(str,key):\r\n    \"\"\"\r\n     *  Encode the Vigenere Cipher\r\n     *  by shifting each character in yourPhrase\r\n     *  by the corresponding character in the \r\n     *  repeating key\r\n    \"\"\"\r\n    ret = ''\r\n    i=0\r\n\r\n    for letter in str:\r\n        # we want A as the first letter of the alphabet,\r\n        # A is ASCII 65, so subtract 65 from each charCodeAt in the key\r\n    \r\n        ret += chr(ord(letter)+ord(key[i])-64)\r\n        if i<len(key)-1:\r\n            i+=1\r\n        else:\r\n            i=0\r\n\r\n    return ret\r\n\r\n\r\n#the Caesar implementation could be improved, and the decode functionality needs to be added\r\n\r\n#caesar testing\r\nyourname = \"Chuck Norris\"\r\nshift    = 1\r\n\r\nsecret    = encodeCaesar(yourname, shift)\r\nnotsecret = decodeCaesar(secret,   shift)\r\n\r\nprint secret + \" is \" + notsecret  \r\n\r\n\r\n# vigenere testing\r\nyourPhrase = \"THE QUICK BROWN FOX JUMPED OVER THE LAZY DOG\"\r\nkey        = \"ARDVAAK\"\r\n\r\nsecret = encodeVigenere(yourPhrase, key)\r\nprint yourPhrase + \" is \" + secret  \r\n```\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}